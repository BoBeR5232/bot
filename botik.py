from flask import Flask, request
import telebot
from telebot import types
import os
from datetime import datetime
import requests
import json
import time
import requests.exceptions

WEBHOOK_URL = 'https://bot-ucxu.onrender.com'
TOKEN = '8452824144:AAHp4mUK1l2IvAol4lhiqDuJSrz0lhdqhp4'
bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)

ARCHIVE_FILE = 'phone_numbers.txt'
FILE_STORAGE = 'saved_file.txt'
REFERRAL_FILE = 'referrals.json'

ADMIN_IDS = [1285348887, 7890456034]

user_state = {}
last_city = {}
bot_enabled = True  # –°—Ç–∞–Ω —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞

# === –†–µ—Ñ–µ—Ä–∞–ª–∏ ===
def load_referrals():
    if os.path.exists(REFERRAL_FILE):
        with open(REFERRAL_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_referrals(data):
    with open(REFERRAL_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

referrals = load_referrals()

def count_referrals(user_id):
    return len(referrals.get(str(user_id), []))

# === –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ===
def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üî• –ù–∞—á–∞—Ç—å"),
        types.KeyboardButton("üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    )
    keyboard.row(
        types.KeyboardButton("‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton("üìÇ –ú–µ–Ω—é")
    )
    return keyboard

def request_phone_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button_phone = types.KeyboardButton(text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
    keyboard.add(button_phone)
    return keyboard

def city_input_keyboard(chat_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = []
    if chat_id in last_city:
        buttons.append(types.KeyboardButton(last_city[chat_id]))
    buttons.append(types.KeyboardButton("üìÇ –ú–µ–Ω—é"))
    keyboard.add(*buttons)
    return keyboard

def is_valid_city(city_name):
    url = 'https://nominatim.openstreetmap.org/search'
    params = {
        'q': city_name,
        'format': 'json',
        'addressdetails': 1,
        'limit': 3,
        'accept-language': 'ru'
    }
    try:
        response = requests.get(url, params=params, headers={'User-Agent': 'TelegramBot'})
        data = response.json()
        if not data:
            return False

        for place in data:
            address = place.get('address', {})
            valid_keys = ['city', 'town', 'village', 'municipality', 'county', 'state', 'region', 'hamlet', 'locality']
            if any(k in address for k in valid_keys):
                display_name = place.get('display_name', '').lower()
                if city_name.lower() in display_name:
                    return True
        return False
    except Exception as e:
        print(f"Error checking city: {e}")
        return False

# === –ö–æ–º–∞–Ω–¥–∏ ===
@bot.message_handler(commands=['start'])
def start_handler(message):
    global bot_enabled
    if not bot_enabled:
        bot.send_message(message.chat.id, "üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    args = message.text.split()
    if len(args) > 1 and args[1].startswith("ref"):
        ref_id = args[1][3:]
        if str(ref_id).isdigit() and str(ref_id) != str(message.from_user.id):
            user_id_str = str(ref_id)
            new_user = str(message.from_user.id)
            if user_id_str not in referrals:
                referrals[user_id_str] = []
            if new_user not in referrals[user_id_str]:
                referrals[user_id_str].append(new_user)
                save_referrals(referrals)

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü... üòè\n\n"
        "–¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –≥–¥–µ —Å–±—ã–≤–∞—é—Ç—Å—è —Å–∞–º—ã–µ —Å–º–µ–ª—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.\n"
        "–ó–¥–µ—Å—å –Ω–µ—Ç —Å—Ç—ã–¥–∞. –ù–µ—Ç –∑–∞–ø—Ä–µ—Ç–æ–≤. –¢–æ–ª—å–∫–æ –∂–µ–ª–∞–Ω–∏—è, —Å—Ç—Ä–∞—Å—Ç—å –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–æ—Å—Ç–∏.\n\n"
        "üëá –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å:"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard())

@bot.message_handler(commands=['on'])
def bot_on(message):
    global bot_enabled
    if message.from_user.id in ADMIN_IDS:
        bot_enabled = True
        bot.send_message(message.chat.id, "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['off'])
def bot_off(message):
    global bot_enabled
    if message.from_user.id in ADMIN_IDS:
        bot_enabled = False
        bot.send_message(message.chat.id, "üõë –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['upload'])
def upload_file_command(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['getphones'])
def get_phones_handler(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    if not os.path.exists(ARCHIVE_FILE):
        bot.send_message(message.chat.id, "–ê—Ä—Ö–∏–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return
    with open(ARCHIVE_FILE, 'rb') as f:
        bot.send_document(message.chat.id, f, caption="–ê—Ä—Ö–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ üìÅ")

@bot.message_handler(content_types=['document'])
def save_admin_file(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.")
        return
    file_id = message.document.file_id
    with open(FILE_STORAGE, 'w') as f:
        f.write(file_id)
    bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.")

@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    global bot_enabled
    if not bot_enabled:
        bot.send_message(message.chat.id, "üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if message.contact:
        phone_number = message.contact.phone_number
        user_id = message.from_user.id
        username = message.from_user.username or "NoUsername"
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        if not is_user_verified(user_id):
            with open(ARCHIVE_FILE, 'a', encoding='utf-8') as f:
                f.write(f"{user_id} | @{username} | {phone_number} | {now}\n")
        bot.send_message(message.chat.id, f"–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω üîê.")
        bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:", reply_markup=city_input_keyboard(message.chat.id))
        user_state[message.chat.id] = 'awaiting_city'
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@bot.message_handler(func=lambda message: message.content_type == 'text')
def button_handler(message):
    global bot_enabled
    if not bot_enabled and message.text not in ['/on', '/off']:
        bot.send_message(message.chat.id, "üö´ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω, –ø–æ–ø–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    text = message.text.strip()

    if text == "üî• –ù–∞—á–∞—Ç—å":
        if not is_user_verified(user_id):
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç.\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=request_phone_keyboard()
            )
        else:
            bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:", reply_markup=city_input_keyboard(message.chat.id))
            user_state[message.chat.id] = 'awaiting_city'

    elif text == "üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
        user_ref_link = f"https://t.me/{bot.get_me().username}?start=ref{user_id}"
        count = count_referrals(user_id)
        balance = count * 100
        msg = (
            f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n{user_ref_link}\n\n"
            f"üí∞ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: *{count}* —á–µ–ª–æ–≤–µ–∫(–∞)\n"
            f"üèÜ –ë–∞–ª–∞–Ω—Å: *{balance}* –±–∞–ª–ª–æ–≤\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ *100 –±–∞–ª–ª–æ–≤* –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
        )
        bot.send_message(message.chat.id, msg, parse_mode="Markdown", reply_markup=main_keyboard())

    elif text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ @Qk_support –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    elif text == "üìÇ –ú–µ–Ω—é":
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
        user_state.pop(message.chat.id, None)

    elif user_state.get(message.chat.id) == 'awaiting_city':
        city = text
        if city == "üìÇ –ú–µ–Ω—é":
            bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard())
            user_state.pop(message.chat.id, None)
            return

        if is_valid_city(city):
            last_city[message.chat.id] = city
            del user_state[message.chat.id]
            proceed_after_city_selection(message.chat.id, city)
        else:
            bot.send_message(message.chat.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=city_input_keyboard(message.chat.id))

# === –î–æ–ø–æ–º—ñ–∂–Ω—ñ ===
def is_user_verified(user_id):
    if not os.path.exists(ARCHIVE_FILE):
        return False
    with open(ARCHIVE_FILE, 'r', encoding='utf-8') as f:
        for line in f:
            if line.startswith(str(user_id) + " |"):
                return True
    return False

def send_saved_file(chat_id):
    if not os.path.exists(FILE_STORAGE):
        bot.send_message(chat_id, "‚ùå –§–∞–π–ª –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    with open(FILE_STORAGE, 'r') as f:
        file_id = f.read().strip()
    try:
        bot.send_document(chat_id, file_id, caption="üìé –í–æ—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n –ï—Å–ª–∏ —É –≤–∞—Å —á—Ç–æ-—Ç–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç —Å –∑–∞–ø—É—Å–∫–æ–º –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

def proceed_after_city_selection(chat_id, city_name):
    bot.send_message(chat_id, f"–¢—ã –≤—ã–±—Ä–∞–ª: {city_name} üèôÔ∏è")
    send_saved_file(chat_id)
    bot.send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è üí´")

# === Flask –≤–µ–±—Ö—É–∫ ===
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'ok', 200

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook ===
@app.route('/setwebhook', methods=['GET'])
def set_webhook():
    bot.remove_webhook()
    success = bot.set_webhook(url=WEBHOOK_URL + '/webhook')
    return f'Webhook set: {success}', 200


# === –°—Ç–∞—Ä—Ç Flask —Å–µ—Ä–≤–µ—Ä–∞ ===
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
